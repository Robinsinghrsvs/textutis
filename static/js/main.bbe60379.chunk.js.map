{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","aboutText","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","background","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","defaultProps","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bbe60379.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function About(props) {\r\n//   const [myStyle, setmyStyle] = useState({\r\n//     color: \"black\",\r\n//     backgroundColor: \"white\",\r\n//   });\r\nlet myStyle ={\r\n    color: props.mode === 'dark'?'white':'#042743',\r\n    backgroundColor: props.mode === 'dark'?'#042743':'white',\r\n    // border: '2px solid',\r\n    // borderColor: props.mode === 'dark'?'white':'#042743'\r\n}\r\n\r\n//   const [btntext, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n//   const toggleStyle = () => {\r\n//     if (myStyle.color === \"black\") {\r\n//       setmyStyle({\r\n//         color: \"white\",\r\n//         backgroundColor: \"black\",\r\n//         border: \"1px solid white\",\r\n//       });\r\n//       setBtnText(\"Enable Light Mode\");\r\n//     } else {\r\n//       setmyStyle({\r\n//         color: \"black\",\r\n//         backgroundColor: \"white\",\r\n//       });\r\n//       setBtnText(\"Enable Dark Mode\");\r\n//     }\r\n//   };\r\n\r\n  return (\r\n    <div className=\"container\" style={{color: props.mode === 'dark'?'white':'#042743'}}>\r\n      <h1 className=\"my-3\">About us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              style={myStyle}\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n            <strong> Analyze Your text </strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              Textutils gives you a way to analyze your text quickly and\r\n              efficiently. Be it word count, character cout or\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n            <strong> Free to use </strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              Textutils is a free character counter tool that provides instant\r\n              charactercount & word count statistics for a given text. TextUtils\r\n              reports the number of words and characters. Thus it is suitable\r\n              for writing text with word/ character limit.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n            <strong> Browser Compatible </strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n              This word counter software works in any web browsers such as\r\n              chrome, Firefox, Internet Explorer, Safari, Opera. It suits to\r\n              count characters in Facebook, blog, books, excel document, pdf\r\n              document,essays, etc.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"container my-3\">\r\n                    <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btntext}</button>\r\n                </div> */}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\r\n              {/* <link className=\"nav-link active\" aria-current=\"page\" to=\"/\"> */}\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText} </Link>\r\n            </li>\r\n          </ul>\r\n          \r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"set title here\",\r\n  aboutText: \"about\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase!\", \"success\");\r\n  }\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase!\", \"success\");\r\n  }\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Copied To Clipboard!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Spaces Removed!\", \"success\");\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1 className='mb-2'>{props.heading} </h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              background: props.mode === \"dark\" ? \"#13466e\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-2\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2>your text summary</h2>\r\n        <p>\r\n          {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characterers\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div className={` alert alert-${props.alert.type} alert-dismissible fade show `} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} ;\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import React from \"react\";\r\nimport \"./App.css\";\r\nimport About from './components/About';\r\nimport Navbar from \"./components/Navbar\";\r\nimport TextForm from \"./components/TextForm\";\r\nimport React, { useState } from \"react\";\r\nimport Alert from \"./components/Alert\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch ,\r\n  Route,\r\n}  from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\"); //whether dark mode is enabled or not\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    });\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 2000);\r\n  };\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#042743\";\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n      // document.title = 'TextUtils - Dark Mode'\r\n    } else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n      // document.title = 'TextUtils - Light Mode'\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <Router>\r\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\r\n      <Alert alert={alert} />\r\n      <div className=\"container my-3\">\r\n      <Switch>\r\n          <Route exact path=\"/about\">\r\n            <About  mode={mode} />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n          <TextForm\r\n          showAlert={showAlert}\r\n          heading=\"Try TextUtils - Word Counter, Charcter Counter, Remove extra spaces\"\r\n          mode={mode} />\r\n          </Route>\r\n      </Switch>\r\n      </div>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}